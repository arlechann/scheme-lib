(import (scheme base)
        (scheme write)
        (gauche base)
        (gauche test)
        (lib coroutine))

(test-start "coroutine")

(define (call/test-section describe body)
  (test-section describe)
  (body))

(call/test-section "generator" (lambda ()
  (define counter #f)
  (define counter-iota #f)
  (set! counter
        (make-generator (lambda (yield)
          (let rec ((c 0))
            (yield c)
            (rec (+ c 1))))))
  (test* "counter 0" 0 (counter))
  (test* "counter 1" 1 (counter))
  (test* "counter 2" 2 (counter))
  (set! counter
        (make-generator (lambda (yield)
          (let rec ((c 0))
            (yield c)
            (rec (+ c 1))))))
  (set! counter-iota
        (make-generator (lambda (yield)
          (let rec ()
            (yield (iota (counter)))
            (rec)))))
  (test* "counter-iota 0" '() (counter-iota))
  (test* "counter-iota 1" '(0) (counter-iota))
  (test* "counter-iota 2" '(0 1) (counter-iota))
  ))

(call/test-section "coroutine" (lambda ()
  (define counter #f)
  (define counter-iota #f)
  (set! counter
        (make-coroutine (lambda ()
          (let rec ((c 0))
            (coroutine-yield c)
            (rec (+ c 1))))))
  (test* "counter 0" 0 (counter))
  (test* "counter 1" 1 (counter))
  (test* "counter 2" 2 (counter))
  (set! counter
        (make-coroutine (lambda ()
          (let rec ((c 0))
            (coroutine-yield c)
            (rec (+ c 1))))))
  (set! counter-iota
        (make-coroutine (lambda ()
          (let rec ()
            (coroutine-yield (iota (counter)))
            (rec)))))
  (test* "counter-iota 0" '() (counter-iota))
  (test* "counter-iota 1" '(0) (counter-iota))
  (test* "counter-iota 2" '(0 1) (counter-iota))
  ))

(test-end)
